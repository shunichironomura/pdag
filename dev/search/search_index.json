{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>pdag</code> \u2014 Parameter Directed Acyclic Graph","text":"<p>Warning</p> <p>This package is under development.</p> <p><code>pdag</code> helps you create and execute a directed acyclic graph (DAG) of parameters and their relationships. Its features include:</p> <ul> <li>You can define parameters and their dependencies with a Python's class-based syntax and annotations.</li> <li>You can import another model into your model, allowing you to create a hierarchy of models and reuse them.</li> <li>You can use the <code>pdag watch</code> command to watch the graph representation of your model while you are creating it.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pdag\n</code></pre> <p>or any package manager that supports Python packages.</p>"},{"location":"#usage","title":"Usage","text":"<p>Here is a simple example of how to use <code>pdag</code> to create a model that squares a number:</p> <pre><code>from typing import Annotated\nimport pdag\n\nclass SquareModel(pdag.Model):\n    \"\"\"Square model that squares a number.\"\"\"\n\n    # x is a real number parameter and is the input to the model\n    x = pdag.RealParameter(\"x\")\n\n    # y is a real number parameter and is the output of the model\n    y = pdag.RealParameter(\"y\")\n\n    # The relationship is defined as a static method\n    # with the @pdag.relationship decorator\n    @pdag.relationship\n    @staticmethod\n    def square(\n      # The annotation `x.ref()` indicates that the value of `x` will be provided\n      # as the value of the `x_arg` parameter when the model is executed.\n      x_arg: Annotated[float, x.ref()],\n\n      # The annotation `y.ref()` indicates that the return value of the method\n      # will be assigned to the `y` parameter when the model is executed.\n    ) -&gt; Annotated[float, y.ref()]:\n        return x_arg**2\n</code></pre> <p>This <code>SquareModel</code> is a static model with input <code>x</code> and output <code>y</code>. Here is the graph representation of the model:</p> <p></p> <p>You can test it by running the following command in the virtual environment where you installed <code>pdag</code>:</p> <pre><code>pdag watch pdag.examples.square:SquareModel square.png\n</code></pre> <p>To execute the model for a specific value of <code>x</code>, execute the following code:</p> <pre><code>core_model = SquareModel.to_core_model()\nexec_model = pdag.create_exec_model_from_core_model(core_model)\nresults = pdag.execute_exec_model(\n  exec_model,\n  inputs={\n    # `()` indicates the root model, and `\"x\"` is the name of the parameter.\n    pdag.StaticParameterId((), \"x\"): 2.0,\n  },\n)\n\nprint(results)\n# {\n#   StaticParameterId(model_path=(), name='x'): 2.0,\n#   StaticParameterId(model_path=(), name='y'): 4.0,\n# }\n</code></pre>"},{"location":"development/testing/","title":"Testing","text":"<p>Run tests with:</p> <pre><code>dotenvx run -f .env.pytest -- uv run pytest tests\n</code></pre> <p>or simply</p> <pre><code>PYTHONHASHSEED=0 uv run pytest tests\n</code></pre>"}]}