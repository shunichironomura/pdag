name: Test

on:
  push:
    branches: [main]
  pull_request:

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.6.x"
  UV_FROZEN: "1"
  UV_NO_SYNC: "1"

jobs:
  ruff:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install ruff
        run: uv sync --only-group ruff

      - name: Run ruff
        run: uv run -- ruff check

  mypy:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the project
        run: uv sync --no-dev --group typing

      - name: Run mypy
        run: uv run -- mypy .

  # build-docs:
  #   if: github.event.pull_request.draft == false
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v3
  #       with:
  #         version: ${{ env.UV_VERSION }}

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Install the project
  #       run: uv sync

  #     - name: Build docs
  #       run: uv run -- mkdocs build

  pytest:
    if: github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] # TODO: Add other OSes
        python-version: ["3.13", "3.12"]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
      COVERAGE_FILE: .coverage.${{ matrix.os }}-${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: ${{ env.UV_VERSION }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install the project
      run: uv sync --no-dev --group testing

    - name: Run pytest
      run: PYTHONHASHSEED=0 uv run -- coverage run --source=./src/pdag -m pytest ./tests --import-mode importlib

    - name: Generate coverage report
      run: |
        uv run -- coverage report -m
        uv run -- coverage xml -o ./coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: coverage.xml
        env_vars: OS,PYTHON
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  lint-imports:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install the project
        run: uv sync --no-dev --group linting

      - name: Run isort
        run: uv run -- lint-imports

  deptry:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install the project
        run: uv sync --no-dev --group linting

      - name: Run deptry
        run: uv run -- deptry .
